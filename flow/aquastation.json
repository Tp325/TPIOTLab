[
    {
        "id": "c9eae6343daa7461",
        "type": "tab",
        "label": "AQUA STATION",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "d360743cc062a6b1",
        "type": "mqtt in",
        "z": "c9eae6343daa7461",
        "name": "",
        "topic": "receiveAquastationDemo",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "4d02509b1007ac55",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 490,
        "y": 500,
        "wires": [
            [
                "be0ac5df29d14a79"
            ]
        ]
    },
    {
        "id": "be0ac5df29d14a79",
        "type": "debug",
        "z": "c9eae6343daa7461",
        "name": "debug 72",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 560,
        "wires": []
    },
    {
        "id": "8be0e625463c00e1",
        "type": "mqtt out",
        "z": "c9eae6343daa7461",
        "name": "",
        "topic": "QuanTracNuocRecieve",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4d02509b1007ac55",
        "x": 490,
        "y": 620,
        "wires": []
    },
    {
        "id": "106b8fb1e0d8c506",
        "type": "inject",
        "z": "c9eae6343daa7461",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ggsddsg",
        "payloadType": "str",
        "x": 260,
        "y": 620,
        "wires": [
            [
                "8be0e625463c00e1"
            ]
        ]
    },
    {
        "id": "aeb7bbba239ca533",
        "type": "mqtt in",
        "z": "c9eae6343daa7461",
        "name": "",
        "topic": "sendAquastationDemo",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "4d02509b1007ac55",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 460,
        "y": 180,
        "wires": [
            [
                "6e780fe58cb32674",
                "1966bfd2c87cd369"
            ]
        ]
    },
    {
        "id": "6e780fe58cb32674",
        "type": "debug",
        "z": "c9eae6343daa7461",
        "name": "debug 73",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 300,
        "wires": []
    },
    {
        "id": "1966bfd2c87cd369",
        "type": "function",
        "z": "c9eae6343daa7461",
        "name": "function 52",
        "func": "let input= msg.payload\n// Lấy thời gian hiện tại cho trường resultTime\nlet resultTime = new Date().toISOString();\n\n// Khởi tạo các biến đo\nlet temp, sal, ph, nh4, o2;\nlet sensorRecords;\n// Lấy tên biến\nlet name = String(input.ID);\n\n// Gán giá trị tương ứng nếu trùng ID\nif(name === \"TMP\") {\n    temp = parseFloat(input.data);\n    sensorRecords = [\n    {\n        \"dataStreamId\": \"87\",\n        \"result\": !isNaN(temp) ? temp.toFixed(1) + \"°C\" : \"N/A\"\n    }];\n}\nif(name === \"SAL\") {\n    sal = parseFloat(input.data);\n      sensorRecords = [\n    {\n        \"dataStreamId\": \"80\",\n        \"result\": !isNaN(sal) ? sal.toFixed(1) + \"ppt\" : \"N/A\"\n    }];\n}\nif(name === \"PH\") {\n    ph = parseFloat(input.data);\n     sensorRecords = [\n    {\n      \"dataStreamId\": \"88\",\n        \"result\": !isNaN(ph) ? ph.toFixed(1) + \"H+\" : \"N/A\"\n    }];\n}\nif(name === \"NH4\") {\n    nh4 = parseFloat(input.data);\n     sensorRecords = [\n    {\n      \"dataStreamId\": \"89\",\n        \"result\": !isNaN(nh4) ? nh4.toFixed(1) + \"H+\" : \"N/A\"\n    }];\n}\nif(name === \"O2\") {\n\n    o2 = parseFloat(input.data);\n     sensorRecords = [\n    {\n      \"dataStreamId\": \"90\",\n        \"result\": !isNaN(o2) ? o2.toFixed(1) + \"%\" : \"N/A\"\n    }];\n}\n\n\n// Gửi kết quả\nmsg.payload = {\n    \"sensorRecords\": sensorRecords,\n    \"resultTime\": resultTime\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 180,
        "wires": [
            [
                "49c01266ad8290ef",
                "b878449b3b0388e4"
            ]
        ]
    },
    {
        "id": "49c01266ad8290ef",
        "type": "debug",
        "z": "c9eae6343daa7461",
        "name": "debug 74",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 240,
        "wires": []
    },
    {
        "id": "90df51b8e782152b",
        "type": "inject",
        "z": "c9eae6343daa7461",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"ID\":\"TMP\",\"data\":42}",
        "payloadType": "str",
        "x": 240,
        "y": 360,
        "wires": [
            [
                "c4f7308bc09ce635"
            ]
        ]
    },
    {
        "id": "c4f7308bc09ce635",
        "type": "mqtt out",
        "z": "c9eae6343daa7461",
        "name": "",
        "topic": "sendAquastationDemo",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4d02509b1007ac55",
        "x": 520,
        "y": 360,
        "wires": []
    },
    {
        "id": "b878449b3b0388e4",
        "type": "mqtt out",
        "z": "c9eae6343daa7461",
        "name": "",
        "topic": "data/view",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4d02509b1007ac55",
        "x": 940,
        "y": 180,
        "wires": []
    },
    {
        "id": "70f470b30fb43372",
        "type": "mqtt out",
        "z": "c9eae6343daa7461",
        "name": "",
        "topic": "iotlab/data_collective",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4d02509b1007ac55",
        "x": 760,
        "y": 320,
        "wires": []
    },
    {
        "id": "03d457f410283b2f",
        "type": "inject",
        "z": "c9eae6343daa7461",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"ID\":\"PH\",\"data\":5}",
        "payloadType": "str",
        "x": 230,
        "y": 320,
        "wires": [
            [
                "c4f7308bc09ce635"
            ]
        ]
    },
    {
        "id": "4d02509b1007ac55",
        "type": "mqtt-broker",
        "name": "iotlab",
        "broker": "dev.iotlab.net.vn",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]